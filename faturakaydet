using DevExpress.XtraReports.UI;
using Muhasebe.Ayarlar;
using Muhasebe.Cari;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Xsl;
using System.IO;
using System.Diagnostics;
using Muhasebe.Siparis;
using BFY.Fatura;
using Muhasebe.Gib.Configuration;
using Muhasebe.Gib.Models;
using Muhasebe.Gib;
using Xunit;
using Muhasebe.Gib.Services;
using DevExpress.Utils;
using DevExpress.XtraTreeList.Data;
using System.Net.Http;
using System.Text.Encodings.Web;
using System.Net;
using Newtonsoft.Json;
using DevExpress.DashboardCommon.DataProcessing;
using System.Globalization;
using Muhasebe.Gib.Exceptions;
using System.Net.Http.Headers;
using Muhasebe.Gib.Models.Invoice;

namespace Muhasebe.Fatura
{
    public partial class SatisFaturasi : Form
    {
        Fonksiyonlar.Formlar Formlar = new Fonksiyonlar.Formlar();
        Fonksiyonlar.DataBaseDataContext DB = new Fonksiyonlar.DataBaseDataContext();
        Fonksiyonlar.Mesajlar Mesajlar = new Fonksiyonlar.Mesajlar();
        Fonksiyonlar.Numara Numaralar = new Fonksiyonlar.Numara();
        Fonksiyonlar.FirmaBilgi FirmaB = new Fonksiyonlar.FirmaBilgi();



        string ftr = "Normal";
        int CariID = -1;
        int OdemeID = -1;
        int FaturaID = -1;
        int IrsaliyeID = -1;
        string OdemeYeri = "";
        bool Edit = false;
        bool IrsaliyeAc = false;
        string EVRAKTURU = "Satış Faturası";
        string AnaKdv = "";
        string VTuru = "";
        string Cturu = "";
        int FrID = -1;
        string no;
        string tokenbilgisi = "";
 



        public SatisFaturasi(bool Ac, int ID, bool Irsaliye)
        {
            InitializeComponent();
            Text = EVRAKTURU;
            Edit = Ac;
            if (Irsaliye) IrsaliyeID = ID;
            else FaturaID = ID;
            IrsaliyeAc = Irsaliye;
            this.Shown += SatisFaturasi_Shown;

        }

        private void SatisFaturasi_Shown(object sender, EventArgs e)
        {

            if (Edit) FaturaGetir();

        }

        void Temizle()
        {
            CariID = -1;
            OdemeID = -1;
            FaturaID = -1;
            IrsaliyeID = -1;
            OdemeYeri = "";
            Edit = false;
            IrsaliyeAc = false;
            txtAciklama.Text = "";
            txtAraToplam.Text = "0.00";
            txtCariAdi.Text = "";
            txtCariKodu.Text = "";
            txtFaturaNo.Text = "";
            txtFaturaTarihi.Text = DateTime.Now.ToShortDateString();
            txtFaturaTuru.SelectedIndex = 0;
            txtGenelToplam.Text = "0.00";
            txtHesapAdi.Text = "";
            txtHesapNo.Text = "";
            txtIrsaliyeNo.Text = "";
            txtIrsaliyeTarihi.Text = DateTime.Now.ToShortDateString();
            txtKasaAdi.Text = "";
            txtKasaKodu.Text = "";
            txtKdv.Text = "0.00";
            txtOdemeYeri.SelectedIndex = 0;
            Anaform.Aktarma = -1;
            for (int i = gridView1.RowCount; i > -1; i--)
            {
                gridView1.DeleteRow(i);
            }




        }

        void FaturaGetir()
        {
            try
            {
                Fonksiyonlar.TBL_FATURALAR Fatura = DB.TBL_FATURALAR.First(s => s.ID == FaturaID);
                IrsaliyeID = Fatura.IRSALIYEID.Value;
                txtAciklama.Text = Fatura.ACIKLAMA;
                txtFaturaNo.Text = Fatura.FATURANO;
                txtAdres.Text = DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).ADRES;
                txtilce.Text= DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).ILCE;
                txtSehir.Text = DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).SEHIR;
                Cturu = DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).VTUR;
                textEdit2.Text = DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).VTUR;
                if (Cturu == "") VTuru = "VKN";
                CariID = DB.TBL_CARILER.First(x => x.CARIKODU == Fatura.CARIKODU).ID;
                Fonksiyonlar.TBL_CARIHAREKETLERI CariHareket = DB.TBL_CARIHAREKETLERI.First(s => s.EVRAKID == FaturaID);
                if (CariHareket.EVRAKTURU == "Satış Faturası") { comboBoxEdit1.SelectedIndex = 1; }
                else { comboBoxEdit1.SelectedIndex = 0; }
                if (Fatura.ODEMEYERIID > 0)
                {
                    txtFaturaTuru.SelectedIndex = 1;

                    if (Fatura.ODEMEYERI == "Kasa")
                    {
                        txtOdemeYeri.SelectedIndex = 0;
                        OdemeYeri = Fatura.ODEMEYERI;
                        txtKasaAdi.Text = DB.TBL_KASALAR.First(s => s.ID == Fatura.ODEMEYERIID.Value).KASAADI;
                        txtKasaKodu.Text = DB.TBL_KASALAR.First(s => s.ID == Fatura.ODEMEYERIID.Value).KASAKODU;
                    }
                    else if (Fatura.ODEMEYERI == "Banka")
                    {
                        txtOdemeYeri.SelectedIndex = 1;
                        OdemeYeri = Fatura.ODEMEYERI;
                        txtHesapAdi.Text = DB.TBL_BANKALAR.First(s => s.ID == Fatura.ODEMEYERIID.Value).HESAPADI;
                        txtHesapNo.Text = DB.TBL_BANKALAR.First(s => s.ID == Fatura.ODEMEYERIID.Value).HESAPNO;
                    }
                    OdemeID = Fatura.ODEMEYERIID.Value;
                }
                else if (Fatura.ODEMEYERIID < 1) txtFaturaTuru.SelectedIndex = 0;

                txtIrsaliyeTarihi.EditValue = DB.TBL_IRSALIYELER.First(s => s.FATURAID == Fatura.ID).TARIHI.Value.ToShortDateString();
                txtCariAdi.Text = DB.TBL_CARILER.First(s => s.CARIKODU == Fatura.CARIKODU).CARIADI;
                txtCariKodu.Text = Fatura.CARIKODU;
                txtIrsaliyeNo.Text = DB.TBL_IRSALIYELER.First(s => s.FATURAID == Fatura.ID).IRSALIYENO;
                txtFaturaTarihi.EditValue = Fatura.TARIHI.Value.ToShortDateString();
                var srg = from s in DB.VW_FATURALISTE
                          where s.FATURAID == FaturaID
                          select s;
                foreach (Fonksiyonlar.VW_FATURALISTE k in srg)
                {
                    gridView1.AddNewRow();
                    gridView1.SetFocusedRowCellValue("MIKTAR", k.MIKTAR);
                    gridView1.SetFocusedRowCellValue("BIRIMFIYAT", k.BIRIMFIYAT);
                    gridView1.SetFocusedRowCellValue("KDV", k.KDV);
                    gridView1.SetFocusedRowCellValue("BARKOD", k.STOKBARKOD);
                    gridView1.SetFocusedRowCellValue("STOKKODU", k.STOKKODU);
                    gridView1.SetFocusedRowCellValue("STOKADI", k.STOKADI);
                    gridView1.SetFocusedRowCellValue("BIRIM", k.STOKBRIM);
                    gridView1.UpdateCurrentRow();

                }

            }
            catch (Exception ex)
            {

                Mesajlar.Hata(ex);
            }
        }
        void StokGetir(int StokID)
        {
            try
            {   
                Fonksiyonlar.FirmaBilgi f = DB.FirmaBilgi.First(s => s.ID != 0);
                Fonksiyonlar.TBL_STOKLAR Stok = DB.TBL_STOKLAR.First(s => s.ID == StokID);
                //stokidcheck = Stok.ID;
                gridView1.AddNewRow();
                gridView1.SetFocusedRowCellValue("MIKTAR", "0");
                gridView1.SetFocusedRowCellValue("BARKOD", Stok.STOKBARKOD);
                gridView1.SetFocusedRowCellValue("STOKKODU", Stok.STOKKODU);
                gridView1.SetFocusedRowCellValue("STOKADI", Stok.STOKADI);
                gridView1.SetFocusedRowCellValue("BIRIM", Stok.STOKBRIM);
                gridView1.SetFocusedRowCellValue("BIRIMFIYAT", Stok.STOKSATISFIYAT);
                if (Stok.STOKSATISKDV > 0) { gridView1.SetFocusedRowCellValue("KDV", Stok.STOKSATISKDV); }
                else { gridView1.SetFocusedRowCellValue("KDV", f.AnaKdvOran); }


            }
            catch (Exception ex)
            {

                Mesajlar.Hata(ex);
            }
        }

        void Hesapla()
        {
            try
            {
                decimal BirimFiyat = 0, Miktar = 0, GenelToplam = 0, AraToplam = 0, Kdv = 0;
                for (int i = 0; i < gridView1.RowCount; i++)
                {
                    BirimFiyat = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                    Miktar = decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                    Kdv = decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString()) / 100 + 1;
                    AraToplam += Miktar * BirimFiyat;
                    GenelToplam += decimal.Parse(gridView1.GetRowCellValue(i, "TOPLAM").ToString()) * Kdv;
                }
                txtAraToplam.Text = AraToplam.ToString("0.00");
                txtKdv.Text = (GenelToplam - AraToplam).ToString("0.00");
                txtGenelToplam.Text = GenelToplam.ToString("0.00");
                txtAciklama.Text = "YALNIZ : " + yaziyaCevir(decimal.Parse(txtGenelToplam.Text.ToString())) + "TUR." + Environment.NewLine + "NOT : İRSALİYE YERİNE DE GEÇER";
                if (GenelToplam >= 2000) ftr = "efatura";
                else ftr = "Normal";

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);

            }
        }

        void CariSec(int ID)
        {
            try
            {
                CariID = ID;
                Fonksiyonlar.TBL_CARILER Cari = DB.TBL_CARILER.First(s => s.ID == CariID);
                txtAdres.Text = Cari.ADRES;
                txtCariKodu.Text = Cari.CARIKODU;
                txtCariAdi.Text = Cari.CARIADI;
                txtilce.Text = Cari.ILCE;
                txtSehir.Text = Cari.SEHIR;
                textEdit2.Text = Cari.VTUR;
                Cturu = Cari.VTUR;



            }
            catch (Exception ex)
            {

                Mesajlar.Hata(ex);
            }
        }

        void GibFaturaKaydet(string GibFaturaNo)
        {

            try
            {
                Fonksiyonlar.TBL_FATURALAR Fatura = new Fonksiyonlar.TBL_FATURALAR();
                Fatura.ACIKLAMA = txtAciklama.Text;
                Fatura.CARIKODU = txtCariKodu.Text;
                Fatura.FATURANO = GibFaturaNo;
                Fatura.FATURATURU = EVRAKTURU;
                Fatura.GENELTOPLAM = decimal.Parse(txtGenelToplam.Text);
                Fatura.IRSALIYEID = IrsaliyeID;
                Fatura.ODEMEYERI = OdemeYeri;
                Fatura.ODEMEYERIID = OdemeID;
                Fatura.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                Fatura.SAVEDATE = DateTime.Now;
                Fatura.SAVEUSER = Anaform.UserID;
                DB.TBL_FATURALAR.InsertOnSubmit(Fatura);
                DB.SubmitChanges();
                FaturaID = Fatura.ID;
                if (IrsaliyeID < 0)
                {
                    Fonksiyonlar.TBL_IRSALIYELER Irsaliye = new Fonksiyonlar.TBL_IRSALIYELER();
                    Irsaliye.ACIKLAMA = txtAciklama.Text;
                    Irsaliye.CARIKODU = txtCariKodu.Text;
                    Irsaliye.FATURAID = Fatura.ID;
                    if (txtIrsaliyeNo.Text == "") Irsaliye.IRSALIYENO = GibFaturaNo;
                    else Irsaliye.IRSALIYENO = txtIrsaliyeNo.Text;
                    Irsaliye.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                    Irsaliye.SAVEDATE = DateTime.Now;
                    Irsaliye.SAVEUSER = Anaform.UserID;
                    DB.TBL_IRSALIYELER.InsertOnSubmit(Irsaliye);
                    DB.SubmitChanges();
                    //IrsaliyeID = Irsaliye.ID;
                    IrsaliyeID = DB.TBL_IRSALIYELER.First(x => x.IRSALIYENO == txtIrsaliyeNo.Text).ID;
                    Fatura.IRSALIYEID = IrsaliyeID;
                    DB.SubmitChanges();


                }
                Fonksiyonlar.TBL_STOKTAKIP[] takip = new Fonksiyonlar.TBL_STOKTAKIP[gridView1.RowCount];
                Fonksiyonlar.TBL_STOKHAREKETLERI[] StokHareketi = new Fonksiyonlar.TBL_STOKHAREKETLERI[gridView1.RowCount];
                for (int i = 0; i < gridView1.RowCount; i++)
                {
                    StokHareketi[i] = new Fonksiyonlar.TBL_STOKHAREKETLERI();
                    StokHareketi[i].BIRIMFIYAT = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                    StokHareketi[i].FATURAID = Fatura.ID;
                    if (EVRAKTURU == "Satış Faturası") { StokHareketi[i].GCKODU = "C"; } else { StokHareketi[i].GCKODU = "G"; }

                    StokHareketi[i].IRSALIYEID = IrsaliyeID;
                    StokHareketi[i].KDV = Decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString());
                    StokHareketi[i].MIKTAR = int.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                    StokHareketi[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                    if (DB.TBL_STOKTAKIP.Count(S => S.STOKKODU == StokHareketi[i].STOKKODU) > 0)
                    {
                        takip[i] = DB.TBL_STOKTAKIP.First(S => S.STOKKODU == StokHareketi[i].STOKKODU);
                        if (EVRAKTURU == "Satış Faturası") { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                        else { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                    }
                    else
                    {
                        takip[i] = new Fonksiyonlar.TBL_STOKTAKIP();

                        if (EVRAKTURU == "Satış Faturası")
                        {
                            takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                            takip[i].STOKADET = (0 - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                        }
                        else
                        {
                            takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                            takip[i].STOKADET = (0 + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                        }
                        DB.TBL_STOKTAKIP.InsertOnSubmit(takip[i]);


                    }


                    StokHareketi[i].TIPI = EVRAKTURU;
                    StokHareketi[i].SAVEDATE = DateTime.Now;
                    StokHareketi[i].SAVEUSER = Anaform.UserID;
                    DB.TBL_STOKHAREKETLERI.InsertOnSubmit(StokHareketi[i]);
                }
                DB.SubmitChanges();


                Fonksiyonlar.TBL_CARIHAREKETLERI CariHareket = new Fonksiyonlar.TBL_CARIHAREKETLERI();
                CariHareket.ACIKLAMA = GibFaturaNo + " no'lu " + EVRAKTURU + " tutarı";
                if (EVRAKTURU == "Satış Faturası")
                {
                    if (txtFaturaTuru.SelectedIndex == 0)
                    {
                        CariHareket.ALACAK = 0;
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                    }
                    else if (txtFaturaTuru.SelectedIndex == 1)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                    }
                }
                else
                {

                    if (txtFaturaTuru.SelectedIndex == 0)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = 0;

                    }
                    else if (txtFaturaTuru.SelectedIndex == 1)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);


                    }
                }
                CariHareket.CARIID = CariID;
                CariHareket.TARIH = DateTime.Parse(txtFaturaTarihi.Text);
                if (EVRAKTURU == "Satış Faturası") { CariHareket.TIPI = "SF"; } else { CariHareket.TIPI = "AF"; }

                CariHareket.EVRAKTURU = EVRAKTURU;
                CariHareket.EVRAKID = Fatura.ID;
                CariHareket.SAVEDATE = DateTime.Now;
                CariHareket.SAVEUSER = Anaform.UserID;
                DB.TBL_CARIHAREKETLERI.InsertOnSubmit(CariHareket);
                DB.SubmitChanges();
                Mesajlar.Guncelle("Yeni Fatura Kaydı Başarı ile Yapılmıştır...");
                Temizle();


            }
            catch (Exception ex)
            {

                Mesajlar.Hata(ex);
            }

        }

        void YeniFaturaKaydet()
        {
            if (ftr == "Normal")
            {
                try
                {
                    Fonksiyonlar.TBL_FATURALAR Fatura = new Fonksiyonlar.TBL_FATURALAR();
                    Fatura.ACIKLAMA = txtAciklama.Text;
                    Fatura.CARIKODU = txtCariKodu.Text;
                    Fatura.FATURANO = txtFaturaNo.Text;
                    Fatura.FATURATURU = EVRAKTURU;
                    Fatura.GENELTOPLAM = decimal.Parse(txtGenelToplam.Text);
                    Fatura.IRSALIYEID = IrsaliyeID;
                    Fatura.ODEMEYERI = OdemeYeri;
                    Fatura.ODEMEYERIID = OdemeID;
                    Fatura.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                    Fatura.SAVEDATE = DateTime.Now;
                    Fatura.SAVEUSER = Anaform.UserID;
                    DB.TBL_FATURALAR.InsertOnSubmit(Fatura);
                    DB.SubmitChanges();
                    FaturaID = Fatura.ID;
                    if (IrsaliyeID < 0)
                    {
                        Fonksiyonlar.TBL_IRSALIYELER Irsaliye = new Fonksiyonlar.TBL_IRSALIYELER();
                        Irsaliye.ACIKLAMA = txtAciklama.Text;
                        Irsaliye.CARIKODU = txtCariKodu.Text;
                        Irsaliye.FATURAID = Fatura.ID;
                        if (txtIrsaliyeNo.Text == "") Irsaliye.IRSALIYENO = txtFaturaNo.Text;
                        else Irsaliye.IRSALIYENO = txtIrsaliyeNo.Text;
                        Irsaliye.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                        Irsaliye.SAVEDATE = DateTime.Now;
                        Irsaliye.SAVEUSER = Anaform.UserID;
                        DB.TBL_IRSALIYELER.InsertOnSubmit(Irsaliye);
                        DB.SubmitChanges();
                        //IrsaliyeID = Irsaliye.ID;
                        IrsaliyeID = DB.TBL_IRSALIYELER.First(x => x.IRSALIYENO == txtIrsaliyeNo.Text).ID;
                        Fatura.IRSALIYEID = IrsaliyeID;
                        DB.SubmitChanges();


                    }
                    Fonksiyonlar.TBL_STOKTAKIP[] takip = new Fonksiyonlar.TBL_STOKTAKIP[gridView1.RowCount];
                    Fonksiyonlar.TBL_STOKHAREKETLERI[] StokHareketi = new Fonksiyonlar.TBL_STOKHAREKETLERI[gridView1.RowCount];
                    for (int i = 0; i < gridView1.RowCount; i++)
                    {
                        StokHareketi[i] = new Fonksiyonlar.TBL_STOKHAREKETLERI();
                        StokHareketi[i].BIRIMFIYAT = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                        StokHareketi[i].FATURAID = Fatura.ID;
                        if (EVRAKTURU == "Satış Faturası") { StokHareketi[i].GCKODU = "C"; } else { StokHareketi[i].GCKODU = "G"; }

                        StokHareketi[i].IRSALIYEID = IrsaliyeID;
                        StokHareketi[i].KDV = Decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString());
                        StokHareketi[i].MIKTAR = int.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                        StokHareketi[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                        if (DB.TBL_STOKTAKIP.Count(S => S.STOKKODU == StokHareketi[i].STOKKODU) > 0)
                        {
                            takip[i] = DB.TBL_STOKTAKIP.First(S => S.STOKKODU == StokHareketi[i].STOKKODU);
                            if (EVRAKTURU == "Satış Faturası") { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                            else { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                        }
                        else
                        {
                            takip[i] = new Fonksiyonlar.TBL_STOKTAKIP();

                            if (EVRAKTURU == "Satış Faturası")
                            {
                                takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                                takip[i].STOKADET = (0 - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                            }
                            else
                            {
                                takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                                takip[i].STOKADET = (0 + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                            }
                            DB.TBL_STOKTAKIP.InsertOnSubmit(takip[i]);


                        }


                        StokHareketi[i].TIPI = EVRAKTURU;
                        StokHareketi[i].SAVEDATE = DateTime.Now;
                        StokHareketi[i].SAVEUSER = Anaform.UserID;
                        DB.TBL_STOKHAREKETLERI.InsertOnSubmit(StokHareketi[i]);
                    }
                    DB.SubmitChanges();


                    Fonksiyonlar.TBL_CARIHAREKETLERI CariHareket = new Fonksiyonlar.TBL_CARIHAREKETLERI();
                    CariHareket.ACIKLAMA = txtFaturaNo.Text + " no'lu " + EVRAKTURU + " tutarı";
                    if (EVRAKTURU == "Satış Faturası")
                    {
                        if (txtFaturaTuru.SelectedIndex == 0)
                        {
                            CariHareket.ALACAK = 0;
                            CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                        }
                        else if (txtFaturaTuru.SelectedIndex == 1)
                        {
                            CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                            CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                        }
                    }
                    else
                    {

                        if (txtFaturaTuru.SelectedIndex == 0)
                        {
                            CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                            CariHareket.BORC = 0;

                        }
                        else if (txtFaturaTuru.SelectedIndex == 1)
                        {
                            CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                            CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);


                        }
                    }
                    CariHareket.CARIID = CariID;
                    CariHareket.TARIH = DateTime.Parse(txtFaturaTarihi.Text);
                    if (EVRAKTURU == "Satış Faturası") { CariHareket.TIPI = "SF"; } else { CariHareket.TIPI = "AF"; }

                    CariHareket.EVRAKTURU = EVRAKTURU;
                    CariHareket.EVRAKID = Fatura.ID;
                    CariHareket.SAVEDATE = DateTime.Now;
                    CariHareket.SAVEUSER = Anaform.UserID;
                    DB.TBL_CARIHAREKETLERI.InsertOnSubmit(CariHareket);
                    DB.SubmitChanges();
                    Mesajlar.Guncelle("Yeni Fatura Kaydı Başarı ile Yapılmıştır...");
                    Temizle();


                }
                catch (Exception ex)
                {

                    Mesajlar.Hata(ex);
                }
            }
            else
            {
                if (MessageBox.Show("Fatura toplamı  2000 Tl den Fazla , E-Fatura kesmeniz gerekli !!!, Yinede kaydedilsinmi?", "Hata - Kaydedilmedi !!!", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    try
                    {
                        Fonksiyonlar.TBL_FATURALAR Fatura = new Fonksiyonlar.TBL_FATURALAR();
                        Fatura.ACIKLAMA = txtAciklama.Text;
                        Fatura.CARIKODU = txtCariKodu.Text;
                        Fatura.FATURANO = txtFaturaNo.Text;
                        Fatura.FATURATURU = EVRAKTURU;
                        Fatura.GENELTOPLAM = decimal.Parse(txtGenelToplam.Text);
                        Fatura.IRSALIYEID = IrsaliyeID;
                        Fatura.ODEMEYERI = OdemeYeri;
                        Fatura.ODEMEYERIID = OdemeID;
                        Fatura.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                        Fatura.SAVEDATE = DateTime.Now;
                        Fatura.SAVEUSER = Anaform.UserID;
                        DB.TBL_FATURALAR.InsertOnSubmit(Fatura);
                        DB.SubmitChanges();
                        FaturaID = Fatura.ID;
                        if (IrsaliyeID < 0)
                        {
                            Fonksiyonlar.TBL_IRSALIYELER Irsaliye = new Fonksiyonlar.TBL_IRSALIYELER();
                            Irsaliye.ACIKLAMA = txtAciklama.Text;
                            Irsaliye.CARIKODU = txtCariKodu.Text;
                            Irsaliye.FATURAID = Fatura.ID;
                            if (txtIrsaliyeNo.Text == "") Irsaliye.IRSALIYENO = txtFaturaNo.Text;
                            else Irsaliye.IRSALIYENO = txtIrsaliyeNo.Text;
                            Irsaliye.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                            Irsaliye.SAVEDATE = DateTime.Now;
                            Irsaliye.SAVEUSER = Anaform.UserID;
                            DB.TBL_IRSALIYELER.InsertOnSubmit(Irsaliye);
                            DB.SubmitChanges();
                            //IrsaliyeID = Irsaliye.ID;
                            IrsaliyeID = DB.TBL_IRSALIYELER.First(x => x.IRSALIYENO == txtIrsaliyeNo.Text).ID;
                            Fatura.IRSALIYEID = IrsaliyeID;
                            DB.SubmitChanges();


                        }
                        Fonksiyonlar.TBL_STOKTAKIP[] takip = new Fonksiyonlar.TBL_STOKTAKIP[gridView1.RowCount];
                        Fonksiyonlar.TBL_STOKHAREKETLERI[] StokHareketi = new Fonksiyonlar.TBL_STOKHAREKETLERI[gridView1.RowCount];
                        for (int i = 0; i < gridView1.RowCount; i++)
                        {
                            StokHareketi[i] = new Fonksiyonlar.TBL_STOKHAREKETLERI();
                            StokHareketi[i].BIRIMFIYAT = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                            StokHareketi[i].FATURAID = Fatura.ID;
                            if (EVRAKTURU == "Satış Faturası") { StokHareketi[i].GCKODU = "C"; } else { StokHareketi[i].GCKODU = "G"; }

                            StokHareketi[i].IRSALIYEID = IrsaliyeID;
                            StokHareketi[i].KDV = Decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString());
                            StokHareketi[i].MIKTAR = int.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                            StokHareketi[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                            if (DB.TBL_STOKTAKIP.Count(S => S.STOKKODU == StokHareketi[i].STOKKODU) > 0)
                            {
                                takip[i] = DB.TBL_STOKTAKIP.First(S => S.STOKKODU == StokHareketi[i].STOKKODU);
                                if (EVRAKTURU == "Satış Faturası") { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                                else { takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString(); }
                            }
                            else
                            {
                                takip[i] = new Fonksiyonlar.TBL_STOKTAKIP();

                                if (EVRAKTURU == "Satış Faturası")
                                {
                                    takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                                    takip[i].STOKADET = (0 - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                                }
                                else
                                {
                                    takip[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                                    takip[i].STOKADET = (0 + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                                }
                                DB.TBL_STOKTAKIP.InsertOnSubmit(takip[i]);


                            }


                            StokHareketi[i].TIPI = EVRAKTURU;
                            StokHareketi[i].SAVEDATE = DateTime.Now;
                            StokHareketi[i].SAVEUSER = Anaform.UserID;
                            DB.TBL_STOKHAREKETLERI.InsertOnSubmit(StokHareketi[i]);
                        }
                        DB.SubmitChanges();


                        Fonksiyonlar.TBL_CARIHAREKETLERI CariHareket = new Fonksiyonlar.TBL_CARIHAREKETLERI();
                        CariHareket.ACIKLAMA = txtFaturaNo.Text + " no'lu " + EVRAKTURU + " tutarı";
                        if (EVRAKTURU == "Satış Faturası")
                        {
                            if (txtFaturaTuru.SelectedIndex == 0)
                            {
                                CariHareket.ALACAK = 0;
                                CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                            }
                            else if (txtFaturaTuru.SelectedIndex == 1)
                            {
                                CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                                CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                            }
                        }
                        else
                        {

                            if (txtFaturaTuru.SelectedIndex == 0)
                            {
                                CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                                CariHareket.BORC = 0;

                            }
                            else if (txtFaturaTuru.SelectedIndex == 1)
                            {
                                CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                                CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);


                            }
                        }
                        CariHareket.CARIID = CariID;
                        CariHareket.TARIH = DateTime.Parse(txtFaturaTarihi.Text);
                        if (EVRAKTURU == "Satış Faturası") { CariHareket.TIPI = "SF"; } else { CariHareket.TIPI = "AF"; }

                        CariHareket.EVRAKTURU = EVRAKTURU;
                        CariHareket.EVRAKID = Fatura.ID;
                        CariHareket.SAVEDATE = DateTime.Now;
                        CariHareket.SAVEUSER = Anaform.UserID;
                        DB.TBL_CARIHAREKETLERI.InsertOnSubmit(CariHareket);
                        DB.SubmitChanges();
                        Mesajlar.Guncelle("Yeni Fatura Kaydı Başarı ile Yapılmıştır...");
                        Temizle();


                    }
                    catch (Exception ex)
                    {

                        Mesajlar.Hata(ex);
                    }
                }
                else
                {
                    MessageBox.Show("Kayıt işlemi tarafınızca iptal edilmiştir.", "Kayıt İptal", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }
        }

        void FaturaGGuncelle()
        {
            try
            {
                var LST = from s in DB.VW_STOKTAKIP
                              //var LST = from s in DB.TBL_CARILER
                          where s.FATURAID == FaturaID
                          select new { s.FATURAID, s.STOKKODU, s.MIKTAR, s.STOKADET };
                foreach (var m in LST)
                {
                    string adet = "";
                    Fonksiyonlar.VW_STOKTAKIP tkp = DB.VW_STOKTAKIP.First(s => s.FATURAID == m.FATURAID && s.STOKKODU == m.STOKKODU);
                    if (EVRAKTURU == "Satış Faturası") adet = (decimal.Parse(tkp.STOKADET) + decimal.Parse(m.MIKTAR.ToString())).ToString();
                    else adet = (decimal.Parse(tkp.STOKADET) - decimal.Parse(m.MIKTAR.ToString())).ToString();
                    Fonksiyonlar.TBL_STOKTAKIP yaz = DB.TBL_STOKTAKIP.First(s => s.STOKKODU == m.STOKKODU);
                    yaz.STOKADET = adet.ToString();
                    DB.SubmitChanges();
                }



                Fonksiyonlar.TBL_FATURALAR Fatura = DB.TBL_FATURALAR.First(s => s.ID == FaturaID);
                Fatura.FATURANO = txtFaturaNo.Text;
                Fatura.TARIHI = DateTime.Parse(txtFaturaTarihi.Text);
                Fatura.ACIKLAMA = txtAciklama.Text;
                Fatura.CARIKODU = txtCariKodu.Text;
                Fatura.GENELTOPLAM = decimal.Parse(txtGenelToplam.Text);
                Fatura.ODEMEYERI = OdemeYeri;
                Fatura.ODEMEYERIID = OdemeID;
                Fatura.EDITDATE = DateTime.Now;
                Fatura.EDITUSER = Anaform.UserID;
                DB.SubmitChanges();
                Fonksiyonlar.TBL_IRSALIYELER Irsaliye = DB.TBL_IRSALIYELER.First(s => s.ID == IrsaliyeID);
                Irsaliye.IRSALIYENO = txtIrsaliyeNo.Text;
                Irsaliye.TARIHI = DateTime.Parse(txtIrsaliyeTarihi.Text);
                Irsaliye.EDITDATE = DateTime.Now;
                Irsaliye.EDITUSER = Anaform.UserID;
                DB.TBL_STOKHAREKETLERI.DeleteAllOnSubmit(DB.TBL_STOKHAREKETLERI.Where(s => s.FATURAID == FaturaID));
                DB.SubmitChanges();

                Fonksiyonlar.TBL_STOKTAKIP[] takip = new Fonksiyonlar.TBL_STOKTAKIP[gridView1.RowCount];
                Fonksiyonlar.TBL_STOKHAREKETLERI[] StokHareketi = new Fonksiyonlar.TBL_STOKHAREKETLERI[gridView1.RowCount];
                for (int i = 0; i < gridView1.RowCount; i++)
                {
                    StokHareketi[i] = new Fonksiyonlar.TBL_STOKHAREKETLERI();
                    StokHareketi[i].BIRIMFIYAT = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                    StokHareketi[i].FATURAID = Fatura.ID;
                    if (EVRAKTURU == "Satış Faturası") { StokHareketi[i].GCKODU = "C"; } else { StokHareketi[i].GCKODU = "G"; }
                    StokHareketi[i].IRSALIYEID = IrsaliyeID;
                    StokHareketi[i].KDV = Decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString());
                    StokHareketi[i].MIKTAR = int.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                    StokHareketi[i].STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();

                    takip[i] = DB.TBL_STOKTAKIP.First(S => S.STOKKODU == StokHareketi[i].STOKKODU);
                    if (EVRAKTURU == "Satış Faturası") takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) - Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                    else takip[i].STOKADET = (Decimal.Parse(takip[i].STOKADET) + Decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString())).ToString();
                    StokHareketi[i].TIPI = EVRAKTURU;
                    StokHareketi[i].SAVEDATE = DateTime.Now;
                    StokHareketi[i].SAVEUSER = Anaform.UserID;
                    DB.TBL_STOKHAREKETLERI.InsertOnSubmit(StokHareketi[i]);
                }
                DB.SubmitChanges();
                Fonksiyonlar.TBL_CARIHAREKETLERI CariHareket = DB.TBL_CARIHAREKETLERI.First(s => s.EVRAKTURU == EVRAKTURU && s.EVRAKID == FaturaID);
                CariHareket.ACIKLAMA = txtFaturaNo.Text + " no'lu " + EVRAKTURU + " tutarı";
                if (EVRAKTURU == "Satış Faturası")
                {
                    if (txtFaturaTuru.SelectedIndex == 0)
                    {
                        CariHareket.ALACAK = 0;
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                    }
                    else if (txtFaturaTuru.SelectedIndex == 1)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);

                    }
                }
                else
                {

                    if (txtFaturaTuru.SelectedIndex == 0)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = 0;

                    }
                    else if (txtFaturaTuru.SelectedIndex == 1)
                    {
                        CariHareket.ALACAK = decimal.Parse(txtGenelToplam.Text);
                        CariHareket.BORC = decimal.Parse(txtGenelToplam.Text);


                    }

                }
                CariHareket.CARIID = CariID;
                CariHareket.TARIH = DateTime.Parse(txtFaturaTarihi.Text);
                if (EVRAKTURU == "Satış Faturası") { CariHareket.TIPI = "SF"; } else { CariHareket.TIPI = "AF"; }

                CariHareket.EVRAKTURU = EVRAKTURU;
                CariHareket.EVRAKID = Fatura.ID;






                CariHareket.EDITDATE = DateTime.Now;
                CariHareket.EDITUSER = Anaform.UserID;
                CariHareket.TARIH = DateTime.Parse(txtFaturaTarihi.Text);
                DB.SubmitChanges();
                Mesajlar.Guncelle(true);
                Temizle();
            }
            catch (Exception ex)
            {

                Mesajlar.Hata(ex);
            }
        }

        void FaturaSil()
        {
            if (Edit && Mesajlar.Sil() == DialogResult.Yes)
            {
                try
                {
                    var LST = from s in DB.VW_STOKTAKIP
                                  //var LST = from s in DB.TBL_CARILER
                              where s.FATURAID == FaturaID
                              select new { s.FATURAID, s.STOKKODU, s.MIKTAR, s.STOKADET };
                    foreach (var m in LST)
                    {
                        string adet = "";
                        Fonksiyonlar.VW_STOKTAKIP tkp = DB.VW_STOKTAKIP.First(s => s.FATURAID == m.FATURAID && s.STOKKODU == m.STOKKODU);
                        if (EVRAKTURU == "Satış Faturası") adet = (decimal.Parse(tkp.STOKADET) + decimal.Parse(m.MIKTAR.ToString())).ToString();
                        else adet = (decimal.Parse(tkp.STOKADET) - decimal.Parse(m.MIKTAR.ToString())).ToString();
                        Fonksiyonlar.TBL_STOKTAKIP yaz = DB.TBL_STOKTAKIP.First(s => s.STOKKODU == m.STOKKODU);
                        yaz.STOKADET = adet.ToString();
                        DB.SubmitChanges();
                    }


                    DB.TBL_CARIHAREKETLERI.DeleteAllOnSubmit(DB.TBL_CARIHAREKETLERI.Where(s => s.EVRAKID == FaturaID && s.EVRAKTURU == EVRAKTURU));
                    DB.TBL_STOKHAREKETLERI.DeleteAllOnSubmit(DB.TBL_STOKHAREKETLERI.Where(s => s.FATURAID == FaturaID));
                    DB.TBL_FATURALAR.DeleteAllOnSubmit(DB.TBL_FATURALAR.Where(s => s.ID == FaturaID));
                    DB.TBL_IRSALIYELER.DeleteAllOnSubmit(DB.TBL_IRSALIYELER.Where(s => s.FATURAID == FaturaID));
                    DB.SubmitChanges();
                    Temizle();
                    Mesajlar.Sil();
                    //Mesajlar.Sil(txtFaturaTarihi.Text + "tarihli ve" + txtFaturaNo.Text + "Nolu fatura kaydınız stokhareketleri,cari hareketler ve faturalardan silindi");
                }
                catch (Exception ex)
                {

                    Mesajlar.Hata(ex);
                }
            }
        }


        public static DataTable LINQResultToDataTable<T>(IEnumerable<T> Linqlist)

        {

            DataTable dt = new DataTable();





            PropertyInfo[] columns = null;



            if (Linqlist == null) return dt;



            foreach (T Record in Linqlist)

            {



                if (columns == null)

                {

                    columns = ((Type)Record.GetType()).GetProperties();

                    foreach (PropertyInfo GetProperty in columns)

                    {

                        Type colType = GetProperty.PropertyType;



                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition()

                        == typeof(Nullable<>)))

                        {

                            colType = colType.GetGenericArguments()[0];

                        }



                        dt.Columns.Add(new DataColumn(GetProperty.Name, colType));

                    }

                }



                DataRow dr = dt.NewRow();



                foreach (PropertyInfo pinfo in columns)

                {

                    dr[pinfo.Name] = pinfo.GetValue(Record, null) == null ? DBNull.Value : pinfo.GetValue

                    (Record, null);

                }



                dt.Rows.Add(dr);

            }

            return dt;

        }

        private string yaziyaCevir(decimal tutar)
        {
            string sTutar = tutar.ToString("F2").Replace('.', ','); // Replace('.',',') ondalık ayracının . olma durumu için            
            string lira = sTutar.Substring(0, sTutar.IndexOf(',')); //tutarın tam kısmı
            string kurus = sTutar.Substring(sTutar.IndexOf(',') + 1, 2);
            string yazi = "";

            string[] birler = { "", "BİR", "İKİ", "ÜÇ", "DÖRT", "BEŞ", "ALTI", "YEDİ", "SEKİZ", "DOKUZ" };
            string[] onlar = { "", "ON", "YİRMİ", "OTUZ", "KIRK", "ELLİ", "ALTMIŞ", "YETMİŞ", "SEKSEN", "DOKSAN" };
            string[] binler = { "KATRİLYON", "TRİLYON", "MİLYAR", "MİLYON", "BİN", "" }; //KATRİLYON'un önüne ekleme yapılarak artırabilir.

            int grupSayisi = 6; //sayıdaki 3'lü grup sayısı. katrilyon içi 6. (1.234,00 daki grup sayısı 2'dir.)
                                //KATRİLYON'un başına ekleyeceğiniz her değer için grup sayısını artırınız.

            lira = lira.PadLeft(grupSayisi * 3, '0'); //sayının soluna '0' eklenerek sayı 'grup sayısı x 3' basakmaklı yapılıyor.            

            string grupDegeri;

            for (int i = 0; i < grupSayisi * 3; i += 3) //sayı 3'erli gruplar halinde ele alınıyor.
            {
                grupDegeri = "";

                if (lira.Substring(i, 1) != "0")
                    grupDegeri += birler[Convert.ToInt32(lira.Substring(i, 1))] + "YÜZ"; //yüzler                

                if (grupDegeri == "BİRYÜZ") //biryüz düzeltiliyor.
                    grupDegeri = "YÜZ";

                grupDegeri += onlar[Convert.ToInt32(lira.Substring(i + 1, 1))]; //onlar

                grupDegeri += birler[Convert.ToInt32(lira.Substring(i + 2, 1))]; //birler                

                if (grupDegeri != "") //binler
                    grupDegeri += binler[i / 3];

                if (grupDegeri == "BİRBİN") //birbin düzeltiliyor.
                    grupDegeri = "BİN";

                yazi += grupDegeri;
            }

            if (yazi != "")
                yazi += " TL ";

            int yaziUzunlugu = yazi.Length;

            if (kurus.Substring(0, 1) != "0") //kuruş onlar
                yazi += onlar[Convert.ToInt32(kurus.Substring(0, 1))];

            if (kurus.Substring(1, 1) != "0") //kuruş birler
                yazi += birler[Convert.ToInt32(kurus.Substring(1, 1))];

            if (yazi.Length > yaziUzunlugu)
                yazi += " KR";
            else
                yazi += "SIFIR KR";

            return yazi;
        }


        private void btnYazdir_Click(object sender, EventArgs e)
        {
            // var srg = DB.VW_FATURALAR.Where(s => s.FATURANO == txtFaturaNo.Text && s.CARIKODU == txtCariKodu.Text);
            // DataSet ds = new DataSet();
            // ds.Tables.Add(LINQResultToDataTable(srg));

            var srg = from s in DB.fisyazdir
                      where s.ID == FaturaID
                      select s;
            DataSet ds = new DataSet();
            ds.Tables.Add(LINQResultToDataTable(srg));

            XtraReport1 rpr = new XtraReport1();
            rpr.DataSource = ds;
            rpr.ShowPreview();
        }

        private void gridView1_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            try
            {
                decimal Miktar = 0, BirimFiyat = 0, Toplam = 0;

                if (e.Column.Name != "colTOPLAM")
                {
                    Miktar = decimal.Parse(gridView1.GetFocusedRowCellValue("MIKTAR").ToString());
                    if (gridView1.GetFocusedRowCellValue("BIRIMFIYAT").ToString() != "")
                    {
                        BirimFiyat = decimal.Parse(gridView1.GetFocusedRowCellValue("BIRIMFIYAT").ToString());
                        Toplam = Miktar * BirimFiyat;


                        gridView1.SetFocusedRowCellValue("TOPLAM", Toplam.ToString());


                        Hesapla();
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void gridView1_RowCountChanged(object sender, EventArgs e)
        {
            Hesapla();
        }

        private void SatisFaturasi_Load_1(object sender, EventArgs e)
        {

            Mesajlar.FormAcilis(this.Text);

            txtFaturaTarihi.Text = DateTime.Now.ToShortDateString();
            txtIrsaliyeTarihi.Text = DateTime.Now.ToShortDateString();
            if (comboBoxEdit1.SelectedIndex == 1) { txtFaturaNo.Text = Numaralar.FaturaKodNumarasi(); }
            if (comboBoxEdit1.SelectedIndex == 0) { txtFaturaNo.Text = ""; }
        }

        private void txtCariKodu_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            int ID = Formlar.CariListesi(true);
            if (ID > 0) CariSec(ID);
            Anaform.Aktarma = -1;
        }

        private void BtnStokSec_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            int StokID = Formlar.StokListesi(true);
            if (StokID > 0)
            {
                StokGetir(StokID);
            }
            Anaform.Aktarma = -1;
        }

        private void BtnKaydet_Click(object sender, EventArgs e)
        {
            if (Edit && FaturaID > 0) FaturaGGuncelle();
            else
            {
                if (txtFaturaNo.Text.ToString() != "" && txtCariKodu.Text.ToString() != "") YeniFaturaKaydet();
                else MessageBox.Show("Lütfen CariAdı ve Fatura No Alanlarını Doldurunuz !", "OK");
            }

        }

        private void BtnSil_Click(object sender, EventArgs e)
        {
            FaturaSil();
        }

        private void txtOdemeYeri_EnabledChanged(object sender, EventArgs e)
        {
            if (txtOdemeYeri.Enabled)
            {
                OdemeYeri = txtOdemeYeri.Text;
            }
            else if (!txtOdemeYeri.Enabled)
            {
                OdemeYeri = "";
            }
        }

        private void BtnKapat_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void txtOdemeYeri_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (txtOdemeYeri.SelectedIndex == 0)
            {
                txtHesapAdi.Enabled = false;
                txtHesapNo.Enabled = false;
                txtKasaAdi.Enabled = true;
                txtKasaKodu.Enabled = true;
                OdemeYeri = txtOdemeYeri.Text;
            }
            if (txtOdemeYeri.SelectedIndex == 1)
            {
                txtHesapAdi.Enabled = true;
                txtHesapNo.Enabled = true;
                txtKasaAdi.Enabled = false;
                txtKasaKodu.Enabled = false;
                OdemeYeri = txtOdemeYeri.Text;
            }
        }

        private void txtFaturaTuru_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (txtFaturaTuru.SelectedIndex == 0)
            {
                pnlOdemeYerleri.Enabled = false;
                txtOdemeYeri.Enabled = false;
            }
            if (txtFaturaTuru.SelectedIndex == 1)
            {
                pnlOdemeYerleri.Enabled = true;
                txtOdemeYeri.Enabled = true;
            }
        }

        private void comboBoxEdit1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxEdit1.SelectedIndex == 1)
            {
                txtFaturaNo.Text = Numaralar.FaturaKodNumarasi();
                EVRAKTURU = "Satış Faturası";
                Text = EVRAKTURU;
                simpleButton1.Visible = true;

            }
            if (comboBoxEdit1.SelectedIndex == 0)
            {
                if (!Edit) txtFaturaNo.Text = "";
                EVRAKTURU = "Alış Faturası";
                Text = EVRAKTURU;
                simpleButton1.Visible = false;
            }


        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            var faturabilgileri = new Fatura
            {
                CariKodu = txtCariKodu.Text,
                CariAdi = txtCariAdi.Text,
                Tarih = txtFaturaTarihi.DateTime,
                FaturaNo = txtFaturaNo.Text,
                Tutar = decimal.Parse(txtAraToplam.Text),
                NetTutar = decimal.Parse(txtAraToplam.Text),
                KdvTutari = decimal.Parse(txtKdv.Text),
                ToplamTutar = decimal.Parse(txtGenelToplam.Text),
            };
            if (Cturu == "") MessageBox.Show(VTuru + "TCKN Veya VKN Olarak vergi türünü seçiniz...");
            else FaturaOlustur(faturabilgileri);
        }

        private void FaturaOlustur(Fatura faturabilgileri)
        {

            Fonksiyonlar.TBL_CARILER Cari = DB.TBL_CARILER.First(s => s.ID == CariID);
            string FatON = "GIB202200";
            int satir = 0;
            for (int i = 0; i < gridView1.RowCount; i++)
            {
                satir = satir + 1;
            }
            Fonksiyonlar.FirmaBilgi f = DB.FirmaBilgi.First(s => s.ID != 0);
            FrID = f.ID;
            VTuru = f.GTur;
            SignatureType[] FirmaBilgi()
            {
                var lines = new List<SignatureType>();
                if (VTuru == "TCKN")
                {
                    var Signature = new SignatureType
                    {

                        ID = new IDType { schemeID = "VKN_TCKN", Value = f.YTCKN },
                        SignatoryParty = new PartyType
                        {
                            PartyIdentification = new[]
                    {
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "TCKN", Value = f.YTCKN }},
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "MERSISNO", Value = f.mersisno }},
                        },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = f.BlokAdi },
                                BuildingNumber = new BuildingNumberType { Value = f.BinaNo },
                                BuildingName = new BuildingNameType { Value = f.BinaAdi },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = f.Ilce },
                                CityName = new CityNameType { Value = FirmaB.Sehir },
                                Country = new CountryType { Name = new NameType1 { Value = f.Ulke } },
                                StreetName = new StreetNameType { Value = f.Cadde },
                                PostalZone = new PostalZoneType { Value = f.PostaKodu },

                            }
                        },
                        DigitalSignatureAttachment = new AttachmentType { ExternalReference = new ExternalReferenceType { URI = new URIType { Value = "#signature_" + FatON + faturabilgileri.FaturaNo } } }
                    };
                    lines.Add(Signature);
                }
                if (VTuru == "VKN")
                {
                    var Signature = new SignatureType
                    {

                        ID = new IDType { schemeID = "VKN_TCKN", Value = f.VKN },
                        SignatoryParty = new PartyType
                        {
                            PartyIdentification = new[]
                    {
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "TCKN", Value = f.YTCKN }},
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "MERSISNO", Value = f.mersisno }},
                        },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = f.BlokAdi },
                                BuildingNumber = new BuildingNumberType { Value = f.BinaNo },
                                BuildingName = new BuildingNameType { Value = f.BinaAdi },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = f.Ilce },
                                CityName = new CityNameType { Value = f.Sehir },
                                Country = new CountryType { Name = new NameType1 { Value = f.Ulke } },
                                StreetName = new StreetNameType { Value = f.Cadde },
                                PostalZone = new PostalZoneType { Value = f.PostaKodu },

                            }
                        },
                        DigitalSignatureAttachment = new AttachmentType { ExternalReference = new ExternalReferenceType { URI = new URIType { Value = "#signature_" + FatON + faturabilgileri.FaturaNo } } }
                    };
                    lines.Add(Signature);
                }
                return lines.ToArray();
            };
            SupplierPartyType Firmam()
            {
                var Signature1 = new SupplierPartyType();
                if (VTuru == "TCKN")
                {
                    var Signature = new SupplierPartyType
                    {
                        Party = new PartyType
                        {
                            PartyIdentification = new[]
                        {
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "TCKN", Value = f.YTCKN }},
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "MERSISNO", Value = f.mersisno }},
                        },

                            Person = new PersonType
                            {
                                FamilyName = new FamilyNameType { Value = f.FSAdi },
                                FirstName = new FirstNameType { Value = f.FYAdi },
                                Title = new TitleType { Value = f.FAdi },
                            },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = f.BlokAdi },
                                BuildingNumber = new BuildingNumberType { Value = f.BinaNo },
                                BuildingName = new BuildingNameType { Value = f.BinaAdi },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = f.Ilce },
                                CityName = new CityNameType { Value = f.Sehir },
                                Country = new CountryType { Name = new NameType1 { Value = f.Ulke } },
                                StreetName = new StreetNameType { Value = f.Cadde },
                                PostalZone = new PostalZoneType { Value = f.PostaKodu },

                            },
                            WebsiteURI = new WebsiteURIType { Value = f.Web },
                            Contact = new ContactType { ElectronicMail = new ElectronicMailType { Value = f.Mail }, Telephone = new TelephoneType { Value = f.Telefon } },
                            PartyTaxScheme = new PartyTaxSchemeType { TaxScheme = new TaxSchemeType { Name = new NameType1 { Value = f.VDairesi } } }

                        },
                    };
                    return Signature;
                }
                if (VTuru == "VKN")
                {
                    var Signature = new SupplierPartyType
                    {
                        Party = new PartyType
                        {
                            PartyIdentification = new[]
                        {
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "TCKN", Value = f.YTCKN }},
                            new PartyIdentificationType{ ID = new IDType {schemeID =  "MERSISNO", Value = f.mersisno }},
                        },
                            PartyName = new PartyNameType { Name = new NameType1 { Value = f.FAdi } },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = f.BlokAdi },
                                BuildingNumber = new BuildingNumberType { Value = f.BinaNo },
                                BuildingName = new BuildingNameType { Value = f.BinaAdi },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = f.Ilce },
                                CityName = new CityNameType { Value = f.Sehir },
                                Country = new CountryType { Name = new NameType1 { Value = f.Ulke } },
                                StreetName = new StreetNameType { Value = f.Cadde },
                                PostalZone = new PostalZoneType { Value = f.PostaKodu },

                            },
                            WebsiteURI = new WebsiteURIType { Value = f.Web },
                            Contact = new ContactType { ElectronicMail = new ElectronicMailType { Value = f.Mail }, Telephone = new TelephoneType { Value = f.Telefon } },
                            PartyTaxScheme = new PartyTaxSchemeType { TaxScheme = new TaxSchemeType { Name = new NameType1 { Value = f.VDairesi } } }

                        },
                    };
                    return Signature;
                }
                return Signature1;
            }
            CustomerPartyType Musterim()
            {
                var musteri1 = new CustomerPartyType();
                if (Cturu == "TCKN")
                {
                    var musteri = new CustomerPartyType()
                    {
                        Party = new PartyType
                        {
                            PartyIdentification = new[] { new PartyIdentificationType { ID = new IDType { schemeID = "TCKN", Value = Cari.TCKN } } },

                            Person = new PersonType
                            {
                                FamilyName = new FamilyNameType { Value = Cari.YETKILISOYADI },
                                FirstName = new FirstNameType { Value = Cari.YETKILI },
                                Title = new TitleType { Value = Cari.CARIADI },
                            },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = "" },
                                BuildingNumber = new BuildingNumberType { Value = "" },
                                BuildingName = new BuildingNameType { Value = "" },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = Cari.ILCE },
                                CityName = new CityNameType { Value = Cari.SEHIR },
                                Country = new CountryType { Name = new NameType1 { Value = Cari.ULKE } },
                                StreetName = new StreetNameType { Value = Cari.ADRES },
                                PostalZone = new PostalZoneType { Value = "" },
                            },
                            WebsiteURI = new WebsiteURIType { Value = Cari.WEB },
                            Contact = new ContactType { ElectronicMail = new ElectronicMailType { Value = Cari.MAIL }, Telephone = new TelephoneType { Value = Cari.TEL1 } },
                            PartyTaxScheme = new PartyTaxSchemeType { TaxScheme = new TaxSchemeType { Name = new NameType1 { Value = Cari.VERGIDAIRESI } } }


                        },
                    };
                    return musteri;

                }
                if (Cturu == "VKN")
                {
                    var musteri = new CustomerPartyType()
                    {
                        Party = new PartyType
                        {
                            PartyIdentification = new[] { new PartyIdentificationType { ID = new IDType { schemeID = "VKN", Value = Cari.VERGINO } } },

                            PartyName = new PartyNameType { Name = new NameType1 { Value = Cari.CARIADI } },
                            PostalAddress = new AddressType
                            {
                                BlockName = new BlockNameType { Value = "" },
                                BuildingNumber = new BuildingNumberType { Value = "" },
                                BuildingName = new BuildingNameType { Value = "" },
                                CitySubdivisionName = new CitySubdivisionNameType { Value = Cari.ILCE },
                                CityName = new CityNameType { Value = Cari.SEHIR },
                                Country = new CountryType { Name = new NameType1 { Value = Cari.ULKE } },
                                StreetName = new StreetNameType { Value = Cari.ADRES },
                                PostalZone = new PostalZoneType { Value = "" },
                            },
                            WebsiteURI = new WebsiteURIType { Value = Cari.WEB },
                            Contact = new ContactType { ElectronicMail = new ElectronicMailType { Value = Cari.MAIL }, Telephone = new TelephoneType { Value = Cari.TEL1 } },
                            PartyTaxScheme = new PartyTaxSchemeType { TaxScheme = new TaxSchemeType { Name = new NameType1 { Value = Cari.VERGIDAIRESI } } }


                        },
                    };
                    return musteri;
                }
                return musteri1;
            }

            InvoiceLineType[] FaturaHareketleri()
            {
                var lines = new List<InvoiceLineType>();
                var linenumber = 1;
                decimal BirimFiyat = 0, Miktar = 0, GenelToplam = 0, AraToplam = 0, Kdv1 = 0, kdvoran = 0;
                string STOKADI, STOKKODU;
                for (int i = 0; i < gridView1.RowCount; i++)
                {

                    STOKKODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();
                    STOKADI = gridView1.GetRowCellValue(i, "STOKADI").ToString();
                    BirimFiyat = decimal.Parse(gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString());
                    Miktar = decimal.Parse(gridView1.GetRowCellValue(i, "MIKTAR").ToString());
                    kdvoran = decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString());
                    Kdv1 = decimal.Parse(gridView1.GetRowCellValue(i, "KDV").ToString()) / 100;
                    AraToplam += Miktar * BirimFiyat;
                    GenelToplam += decimal.Parse(gridView1.GetRowCellValue(i, "TOPLAM").ToString()) * Kdv1;

                    var line = new InvoiceLineType
                    {
                        ID = new IDType { Value = linenumber.ToString() },
                        InvoicedQuantity = new InvoicedQuantityType { unitCode = "C62", Value = Miktar },
                        LineExtensionAmount = new LineExtensionAmountType { currencyID = "TRY", Value = AraToplam },
                        TaxTotal = new TaxTotalType
                        {
                            TaxAmount = new TaxAmountType { currencyID = "TRY", Value = Kdv1 },
                            TaxSubtotal = new[]
                            {
                                new TaxSubtotalType
                                {
                                    TaxableAmount = new TaxableAmountType { currencyID = "TRY", Value = AraToplam},
                                    TaxAmount = new TaxAmountType { currencyID = "TRY", Value = Kdv1},
                                    Percent = new PercentType1 { Value = kdvoran},
                                    TaxCategory = new TaxCategoryType
                                    {
                                        TaxScheme = new TaxSchemeType { TaxTypeCode = new TaxTypeCodeType{Value="0015", name = "KDV"}},
                                    },

                                },
                            },

                        },
                        Item = new ItemType { Name = new NameType1 { Value = STOKKODU + " - " + STOKADI } },
                        Price = new PriceType { PriceAmount = new PriceAmountType { currencyID = "TRY", Value = BirimFiyat } }

                    };

                    linenumber++;
                    lines.Add(line);
                };
                return lines.ToArray();
            }

            var invoice = new InvoiceType
            {
                UBLVersionID = new UBLVersionIDType { Value = "2.1" },
                CustomizationID = new CustomizationIDType { Value = "TR1.2" },
                ProfileID = new ProfileIDType { Value = "EARSIVFATURA" },
                ID = new IDType { Value = FatON + faturabilgileri.FaturaNo },
                CopyIndicator = new CopyIndicatorType { Value = false },
                UUID = new UUIDType { Value = Guid.NewGuid().ToString() },
                IssueDate = new IssueDateType { Value = faturabilgileri.Tarih },
                IssueTime = new IssueTimeType { Value = faturabilgileri.Tarih },
                InvoiceTypeCode = new InvoiceTypeCodeType { Value = "SATIS" },
                Note = new[] {
                    new NoteType { Value = txtAciklama.Text },
                    new NoteType { Value = "İş bu fatura muhteviyatına 7 gün içerisinde itiraz edilmediği taktirde aynen kabul edilmiş sayılır." },
                    new NoteType { Value = "İrsaliye yerine de geçer." },
                },
                DocumentCurrencyCode = new DocumentCurrencyCodeType { Value = "TRY" },
                LineCountNumeric = new LineCountNumericType { Value = faturabilgileri.SatirSayisi },
                AdditionalDocumentReference = new[] { new DocumentReferenceType
                {
                    ID = new IDType { Value = Guid.NewGuid().ToString() },
                    IssueDate = new IssueDateType { Value = faturabilgileri.Tarih },
                    DocumentType = new DocumentTypeType { Value = "XSLT" },
                    Attachment = new AttachmentType
                    {
                        EmbeddedDocumentBinaryObject = new EmbeddedDocumentBinaryObjectType
                        {
                            characterSetCode = "UTF-8",
                            encodingCode = "Base64",
                            filename = "EArchiveInvoice.xslt",
                            mimeCode = "application/xml",
                            Value = Encoding.UTF8.GetBytes(new StreamReader(new FileStream(Application.StartupPath + "\\" + "general.xslt", FileMode.Open, FileAccess.Read), Encoding.UTF8).ReadToEnd())
                        }
                    }
                },
                    new DocumentReferenceType
                    {
                        ID = new IDType { Value = Guid.NewGuid().ToString() },
                        IssueDate = new IssueDateType { Value = faturabilgileri.Tarih },
                        DocumentTypeCode = new DocumentTypeCodeType { Value = "SendingType" },
                        DocumentType = new DocumentTypeType { Value = "ELEKTRONIK" }
                    }
                },
                Signature = FirmaBilgi(),
                AccountingSupplierParty = Firmam(),
                AccountingCustomerParty = Musterim(),
                TaxTotal = new[]
                {
                    new TaxTotalType { TaxAmount = new TaxAmountType { Value = faturabilgileri.KdvTutari},
                    TaxSubtotal = new []
                    {
                        new TaxSubtotalType
                        {
                            TaxableAmount = new TaxableAmountType { currencyID = "TRY", Value = faturabilgileri.NetTutar},
                            TaxAmount = new TaxAmountType { currencyID = "TRY", Value = faturabilgileri.KdvTutari},
                            CalculationSequenceNumeric = new CalculationSequenceNumericType { Value = 1},
                            TaxCategory = new TaxCategoryType
                            {
                                TaxScheme = new TaxSchemeType
                                {
                                    Name =new NameType1{ Value = "KDV"},
                                    TaxTypeCode = new TaxTypeCodeType{ Value = "0015"}
                                }
                            }
                        },
                    }
                }},
                LegalMonetaryTotal = new MonetaryTotalType
                {
                    LineExtensionAmount = new LineExtensionAmountType { Value = faturabilgileri.Tutar },
                    TaxExclusiveAmount = new TaxExclusiveAmountType { Value = faturabilgileri.NetTutar },
                    TaxInclusiveAmount = new TaxInclusiveAmountType { Value = faturabilgileri.ToplamTutar },
                    PayableAmount = new PayableAmountType { Value = faturabilgileri.ToplamTutar }
                },

                InvoiceLine = FaturaHareketleri()
            };

            var settings = new XmlWriterSettings { OmitXmlDeclaration = true, Indent = true };
            var ms = new MemoryStream();
            var writer = XmlWriter.Create(ms, settings);
            var srl = new XmlSerializer(invoice.GetType());
            srl.Serialize(writer, invoice, XmlNameSpace());
            ms.Flush();
            ms.Seek(offset: 0, SeekOrigin.Begin);
            var srRead = new StreamReader(ms);
            var readXml = srRead.ReadToEnd();
            var path = Path.Combine($@"{Application.StartupPath}\EarsivFaturalar\{invoice.ID.Value}.xml");

            void eFaturaOlustur()
            {
                using (var sWriter = new StreamWriter(path, false, Encoding.UTF8))
                {
                    sWriter.Write(readXml);
                    sWriter.Close();
                }
            }

            if (!Directory.Exists($@"{Application.StartupPath}\EarsivFaturalar"))
                Directory.CreateDirectory($@"{Application.StartupPath}\EarsivFaturalar");
            if (!File.Exists($@"{Application.StartupPath}\EarsivFaturalar\ {invoice.ID.Value}.xml"))
                eFaturaOlustur();
            else
                if (MessageBox.Show($@"{invoice.ID.Value}.xml Dosyası daha önceden oluşturulmuş.Yeniden oluşturulsun mu?", "Onay", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                eFaturaOlustur();

            if (MessageBox.Show($@"Fatura oluşturma işlemi başarılı bir şekilde tamamlandı.Faturalar '{Application.StartupPath}\EarsivFaturalar' konumunda oluşturuldu. Konumu açmak istiyormusunuz ?", "Onay", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) != DialogResult.Yes) return;
            Process.Start(Application.StartupPath + "\\EarsivFaturalar");

            XmlSerializerNamespaces XmlNameSpace()
            {
                var ns = new XmlSerializerNamespaces();
                ns.Add("cac", "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2");
                ns.Add("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                ns.Add("xades", "http://uri.etsi.org/01903/v1.3.2#");
                ns.Add("udt", "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2");
                ns.Add("ubltr", "urn:oasis:names:specification:ubl:schema:xsd:TurkishCustomizationExtensionComponents");
                ns.Add("qdt", "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2");
                ns.Add("ext", "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2");
                ns.Add("cbc", "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2");
                ns.Add("ccts", "urn:un:unece:uncefact:documentation:2");
                ns.Add("ds", "http://www.w3.org/2000/09/xmldsig#");
                return ns;
            }

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            xmlgoruntule frm = new xmlgoruntule();
            //frm.MdiParent = AnaForm.ActiveForm;
            //frm.Show();
            frm.ShowDialog();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            DialogResult secenek = MessageBox.Show("Fatura Hem Gib Hemde Sistemde Kaydedilir.Devam Edilsinmi ?", "Dikkat", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            if (secenek == DialogResult.Yes)
            {
                //Evet derse yapılacak işlemler
                _ = FaturaService_Should_Get_Token_On_InitialisationAsync();
            }
            else if (secenek == DialogResult.No)
            {
                //Hayır derse yapılacak işlemler
            }
            
        }

        [Fact]
        public async Task FaturaService_Should_Get_Token_On_InitialisationAsync()
        {
            try
            {
                FaturaServiceConfiguration configuration = (FaturaServiceConfiguration)FaturaServiceConfigurationFactory.Create();
                await FaturaServiceHelper.InitializeFaturaService(configuration);
                if (configuration.Password != "1") configuration.ServiceType = ServiceType.Prod;
                FaturaService faturaService = new(configuration);

                tokenbilgisi = configuration.Token;
                if (Cturu == "TCKN") no = DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).TCKN;
                if (Cturu == "VKN") no = DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).VERGINO;

                var nesne = new InvoiceDetailsModel
                {
                    date = txtFaturaTarihi.Text,
                    time = DateTime.Now.ToLongTimeString(),
                    name = (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).YETKILI).ToString(),
                    surname = (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).YETKILISOYADI).ToString(),
                    title = (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).CARIADI).ToString(),
                    taxIDOrTRID = no.ToString(),
                    taxOffice = (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).VERGIDAIRESI).ToString(),
                    grandTotal = decimal.Parse(txtAraToplam.Text.ToString()),
                    totalVAT = decimal.Parse(txtKdv.Text.ToString()),
                    grandTotalInclVAT = decimal.Parse(txtGenelToplam.Text.ToString()),
                    paymentTotal = decimal.Parse(txtGenelToplam.Text.ToString()),
                    fullAddress = (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).ADRES).ToString() + "/" + (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).ILCE).ToString() + "/" + (DB.TBL_CARILER.First(x => x.CARIKODU == txtCariKodu.Text).SEHIR).ToString(),
                    items = new List<InvoiceDetailsItemModel>()
                };


                // Satırdaki veriyi alıyoruz
                for (int i = 0; i < gridView1.RowCount; i++)
                {
                    var dataRow = gridView1.GetDataRow(i);
                    if (dataRow != null)
                    {
                        try
                        {

                            // STOKADI sütununu alma ve kontrol etme
                            string stokkODU = gridView1.GetRowCellValue(i, "STOKKODU").ToString();

                            // STOKADI sütununu alma ve kontrol etme
                            string stokAdi = gridView1.GetRowCellValue(i, "STOKADI").ToString();
    
                            // BIRIMFIYAT sütununu alma ve kontrol etme
                            string birimFiyatStr = gridView1.GetRowCellValue(i, "BIRIMFIYAT").ToString();
                            birimFiyatStr = birimFiyatStr.Replace(",", ".");
                            decimal birimFiyat = decimal.Parse(birimFiyatStr, CultureInfo.InvariantCulture);


                            // MIKTAR sütununu alma ve kontrol etme
                            string miktarStr = gridView1.GetRowCellValue(i, "MIKTAR").ToString();
                            int miktar = int.Parse(miktarStr);


                            // KDV sütununu alma ve kontrol etme
                            string kdvStr = gridView1.GetRowCellValue(i, "KDV").ToString();
                            kdvStr = kdvStr.Replace(",", ".");  // Ondalık ayırıcısını değiştirdik
                            decimal kdv = decimal.Parse(kdvStr, CultureInfo.InvariantCulture);  // Decimal parse işlemi
     

                            // Fiyat hesaplama
                            decimal fiyat = miktar * birimFiyat;


                            // KDV Tutarı hesaplama
                            decimal kdvTutari = kdv / 100 * fiyat;


                            string aciklama = txtAciklama.Text;
                            aciklama += "\nNOT İRSALİYE YERİNE DE GEÇER.";
  

                            // InvoiceDetailsItemModel'e ekleme
                            var item = new InvoiceDetailsItemModel
                            {
                                name = stokkODU + " - " + stokAdi,
                                unitPrice = birimFiyat,
                                quantity = miktar,
                                VATRate = (int)kdv,
                                price = (int)fiyat,
                                VATAmount = kdvTutari,
                                //note = aciklama,
                            };

                            nesne.items.Add(item);
                        }
                        catch (FormatException ex)
                        {
                            // Hatalı giriş yapıldığı zaman, hangi veride hata olduğunu belirtir
                            Console.WriteLine($"Satır {i + 1}'de hata: {ex.Message}");
                        }
                        catch (Exception ex)
                        {
                            // Diğer hatalar için genel bir hata mesajı
                            Console.WriteLine($"Satır {i + 1}'de beklenmedik bir hata: {ex.Message}");
                        }
                    }
                }

                List<MalHizmetTableModel> malHizmetListesi = new List<MalHizmetTableModel>();

                foreach (var item in nesne.items)
                {
                    // Her bir InvoiceDetailsItemModel'i MalHizmetTableModel'e çevir
                    var malHizmet = new MalHizmetTableModel(item);
                    malHizmetListesi.Add(malHizmet);
                }

                try
                {
                    
                    var response = await faturaService.CreateInvoice(nesne, false);
                    MessageBox.Show("Fatura oluşturuldu. Yanıt: " + response.ToString(), "Başarı", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    FaturaNoAl();

                }
                catch (Exception ex)
                {
                    MessageBox.Show("Bir hata oluştu: " + ex.Message, "Hata", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }


            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }

        private decimal ParseDecimal(string text)
        {
            return decimal.TryParse(text, out var result) ? result : 0m;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (tokenbilgisi != null)
            {
                string url = "https://earsivportaltest.efatura.gov.tr/index.jsp?token=" + tokenbilgisi;
                System.Diagnostics.Process.Start(url);
            }
        }

        async void FaturaNoAl()
        {
            FaturaServiceConfiguration configuration = (FaturaServiceConfiguration)FaturaServiceConfigurationFactory.Create();
            await FaturaServiceHelper.InitializeFaturaService(configuration);
            if (configuration.Password != "1") configuration.ServiceType = ServiceType.Prod;
            FaturaService faturaService = new(configuration);
            string token = configuration.Token;
            FoundDraftInvoiceResponseModel invoicesResponse = await faturaService.GetAllInvoicesByDateRange(DateTime.Now.AddDays(-10), DateTime.Now);

            if (invoicesResponse != null && invoicesResponse.data != null && invoicesResponse.data.Count > 0)
            {
                // Bugünkü kesilen faturaları bul (belge tarihine göre filtrele)
                var todaysInvoices = invoicesResponse.data
                    .Where(k => k.belgeTarihi == DateTime.Now.ToString("dd-MM-yyyy")) // Bugünün tarihine göre filtrele
                    .ToList();

                if (todaysInvoices.Count > 0)
                {
                    // Belge numarasına göre sıralayıp en büyük numarayı al (en son kesilen fatura)
                    var latestInvoice = todaysInvoices
                        .OrderByDescending(k => k.belgeNumarasi) // Belge numarasına göre azalan sıraya göre sıralama
                        .FirstOrDefault(); // En büyüğünü al

                    if (latestInvoice != null)
                    {
                        // En büyük belge numarasını al ve sadece rakamları tut
                        string latestInvoiceNumber = latestInvoice.belgeNumarasi;

                        // Başındaki 'GIB' kısmını kaldır ve sadece rakamları al
                        if (latestInvoiceNumber.StartsWith("GIB"))
                        {
                            latestInvoiceNumber = latestInvoiceNumber.Substring(3); // 'GIB' kısmını atla
                        }

                        // Belge numarasını gösterebilir veya kullanabilirsin
                        Console.WriteLine($"En son kesilen fatura belge numarası (sadece rakamlar): {latestInvoiceNumber}");
                        GibFaturaKaydet(latestInvoiceNumber);
                        // Eğer DataGridView'e eklemek istersen
                    }
                    else
                    {
                        Console.WriteLine("Bugünkü faturalar arasında en büyük belge numarası bulunamadı.");
                    }
                }
                else
                {
                    Console.WriteLine("Bugün kesilen fatura bulunamadı.");
                }
            }
            else
            {
                Console.WriteLine("Fatura verisi bulunamadı.");
            }
        }




    }


}
